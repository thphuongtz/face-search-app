import streamlit as st
import cv2
import numpy as np
import os
from PIL import Image
from FAISS import get_face_embedding

st.set_page_config(page_title="Face Search App (MediaPipe)", layout="wide")

st.title("üîç Face Search App (MediaPipe + NumPy)")
os.makedirs("data/known_faces", exist_ok=True)
os.makedirs("data/uploads", exist_ok=True)

tab1, tab2 = st.tabs(["üß† Add Known Faces", "üîé Search Face"])

# --- TAB 1 ---
with tab1:
    st.header("üß† Th√™m khu√¥n m·∫∑t m·ªõi")
    upload_img = st.file_uploader("T·∫£i ·∫£nh khu√¥n m·∫∑t", type=["jpg", "png", "jpeg"])
    name = st.text_input("T√™n ng∆∞·ªùi n√†y:")

    if st.button("L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu") and upload_img and name:
        img_path = f"data/known_faces/{name}.jpg"
        Image.open(upload_img).save(img_path)
        st.success(f"‚úÖ ƒê√£ l∆∞u {name}.jpg v√†o c∆° s·ªü d·ªØ li·ªáu!")

# --- TAB 2 ---
with tab2:
    st.header("üîé T√¨m ki·∫øm khu√¥n m·∫∑t trong ·∫£nh m·ªõi")
    query_file = st.file_uploader("Ch·ªçn ·∫£nh c·∫ßn t√¨m", type=["jpg", "png", "jpeg"])
    if query_file:
        img_path = f"data/uploads/query.jpg"
        Image.open(query_file).save(img_path)
        img = cv2.imread(img_path)

        boxes, query_emb = get_face_embedding(img)
        if query_emb is None:
            st.error("‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t.")
        else:
            st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), caption="·∫¢nh t√¨m ki·∫øm")

            # T·∫£i c∆° s·ªü d·ªØ li·ªáu
            db = {}
            for f in os.listdir("data/known_faces"):
                name = os.path.splitext(f)[0]
                img_db = cv2.imread(os.path.join("data/known_faces", f))
                _, emb_db = get_face_embedding(img_db)
                if emb_db is not None and len(emb_db) > 0:
                    db[name] = emb_db[0]

            if len(db) == 0:
                st.warning("‚ö†Ô∏è C∆° s·ªü d·ªØ li·ªáu tr·ªëng. H√£y th√™m khu√¥n m·∫∑t tr∆∞·ªõc.")
            else:
                similarities = {}
                for name, emb in db.items():
                    sim = np.dot(query_emb[0], emb) / (np.linalg.norm(query_emb[0])*np.linalg.norm(emb))
                    similarities[name] = sim

                best_match = max(similarities, key=similarities.get)
                st.success(f"‚úÖ K·∫øt qu·∫£ g·∫ßn nh·∫•t: **{best_match}** (similarity={similarities[best_match]:.3f})")
                st.bar_chart(similarities)
